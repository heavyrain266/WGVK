# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ] # Run on pushes to the master branch
    tags:
      - 'v*.*.*'       # Also run on version tags
  pull_request:
    branches: [ "master" ] # Run on pull requests targeting master

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # ... (your matrix configuration remains unchanged) ...
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          # Windows MSVC
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          # Ubuntu GCC
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          # Ubuntu clang
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          # MSYS2 MINGW64 + GCC
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            msys2_env: MINGW64
          # MSYS2 MINGW64 + Clang
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            msys2_env: MINGW64
          # MSYS2 UCRT64 + GCC
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            msys2_env: UCRT64
          # MSYS2 UCRT64 + Clang
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            msys2_env: UCRT64
          # MSYS2 CLANG64 + Clang
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            msys2_env: CLANG64
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    # ... (all your build and test steps remain exactly the same) ...
    - uses: actions/checkout@v4

    - name: Setup MSYS2 (GCC)
      if: matrix.msys2_env && matrix.c_compiler == 'gcc'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msys2_env }}
        update: true
        install: >-
          base-devel
          git
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p

    - name: Setup MSYS2 (Clang)
      if: matrix.msys2_env && matrix.c_compiler == 'clang'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msys2_env }}
        update: true
        install: >-
          base-devel
          git
        pacboy: >-
          clang:p
          cmake:p
          ninja:p

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set MSYS2 paths
      if: matrix.msys2_env
      id: msys2_strings
      shell: msys2 {0}
      run: |
        echo "build-output-dir=$(cygpath -u '${{ github.workspace }}')/build" >> "$GITHUB_OUTPUT"
        echo "source-dir=$(cygpath -u '${{ github.workspace }}')" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (MSYS2)
      if: matrix.msys2_env
      shell: msys2 {0}
      run: >
        cmake -B ${{ steps.msys2_strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DWGVK_USE_VMA=ON
        -DWGVK_BUILD_EXAMPLES=OFF
        -DWGVK_BUILD_WGSL_SUPPORT=ON
        -DWGVK_BUILD_GLSL_SUPPORT=ON
        -S ${{ steps.msys2_strings.outputs.source-dir }}

    - name: Configure CMake (Regular)
      if: '!matrix.msys2_env'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DWGVK_USE_VMA=ON
        -DWGVK_BUILD_EXAMPLES=OFF
        -DWGVK_BUILD_WGSL_SUPPORT=ON
        -DWGVK_BUILD_GLSL_SUPPORT=ON
        -S ${{ github.workspace }}

    - name: Build (MSYS2)
      if: matrix.msys2_env
      shell: msys2 {0}
      run: cmake --build ${{ steps.msys2_strings.outputs.build-output-dir }} --parallel 4

    - name: Build (Regular)
      if: '!matrix.msys2_env'
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel 4

    - name: Test (MSYS2)
      if: matrix.msys2_env
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: msys2 {0}
      run: ctest

    - name: Test (Regular)
      if: '!matrix.msys2_env'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    # This step now runs on every build, but the artifacts are only used by the release job on tag pushes.
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: wgvk-lib-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: ${{ github.workspace }}/build/libwgvk.a

  release:
    needs: build
    runs-on: ubuntu-latest
    # THIS IS THE CRITICAL CONDITION:
    # This job will only run if the event that triggered the workflow was a tag push.
    # For regular pushes to master, this job will be skipped.
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Upload Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: artifacts/**/*
          file_glob: true