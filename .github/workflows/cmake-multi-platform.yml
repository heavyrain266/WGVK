name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            msys2_env: MINGW64
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            msys2_env: MINGW64
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            msys2_env: UCRT64
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            msys2_env: UCRT64
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            msys2_env: CLANG64
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2 (GCC)
        if: matrix.msys2_env && matrix.c_compiler == 'gcc'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys2_env }}
          update: true
          install: >-
            base-devel
            git
          pacboy: >-
            toolchain:p
            cmake:p
            ninja:p

      - name: Setup MSYS2 (Clang)
        if: matrix.msys2_env && matrix.c_compiler == 'clang'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys2_env }}
          update: true
          install: >-
            base-devel
            git
          pacboy: >-
            clang:p
            cmake:p
            ninja:p

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Set MSYS2 paths
        if: matrix.msys2_env
        id: msys2_strings
        shell: msys2 {0}
        run: |
          echo "build-output-dir=$(cygpath -u '${{ github.workspace }}')/build" >> "$GITHUB_OUTPUT"
          echo "source-dir=$(cygpath -u '${{ github.workspace }}')" >> "$GITHUB_OUTPUT"

      - name: Configure CMake (MSYS2)
        if: matrix.msys2_env
        shell: msys2 {0}
        run: >
          cmake -B ${{ steps.msys2_strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DWGVK_USE_VMA=ON
          -DWGVK_BUILD_EXAMPLES=OFF
          -DWGVK_BUILD_GLSL_SUPPORT=ON
          -S ${{ steps.msys2_strings.outputs.source-dir }}

      - name: Configure CMake (Regular)
        if: '!matrix.msys2_env'
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DWGVK_USE_VMA=ON
          -DWGVK_BUILD_EXAMPLES=OFF
          -DWGVK_BUILD_GLSL_SUPPORT=ON
          -S ${{ github.workspace }}

      - name: Build (MSYS2)
        if: matrix.msys2_env
        shell: msys2 {0}
        run: cmake --build ${{ steps.msys2_strings.outputs.build-output-dir }} --parallel 4

      - name: Build (Regular)
        if: '!matrix.msys2_env'
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel 4

      - name: Test (MSYS2)
        if: matrix.msys2_env
        working-directory: ${{ steps.msys2_strings.outputs.build-output-dir }}
        shell: msys2 {0}
        run: ctest

      - name: Test (Regular)
        if: '!matrix.msys2_env'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      # Artifacts: only Ubuntu+clang, Windows+cl (MSVC), and Windows+MSYS2 (all envs)
      - name: Upload artifact (Ubuntu clang)
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang' && !matrix.msys2_env
        uses: actions/upload-artifact@v4
        with:
          name: wgvk-ubuntu-clang
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/**/libwgvk.a
          if-no-files-found: error
          retention-days: 7

      - name: Upload artifact (Windows MSVC cl)
        if: matrix.os == 'windows-latest' && matrix.c_compiler == 'cl' && !matrix.msys2_env
        uses: actions/upload-artifact@v4
        with:
          name: wgvk-windows-msvc
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/**/wgvk.lib
          if-no-files-found: error
          retention-days: 7

      - name: Upload artifact (Windows MSYS2 MinGW)
        if: matrix.os == 'windows-latest' && matrix.msys2_env
        uses: actions/upload-artifact@v4
        with:
          name: wgvk-windows-${{ matrix.msys2_env }}-mingw
          path: |
            ${{ steps.msys2_strings.outputs.build-output-dir }}/**/libwgvk.a
          if-no-files-found: error
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Upload Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: artifacts/**/*
          file_glob: true
